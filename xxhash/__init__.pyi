from mmap import mmap
from typing import Union

_ReadableBuffer = Union[bytes, bytearray, memoryview, array.array, mmap.mmap]

class _Hash(object):
    digest_size: int
    block_size: int
    name: str
    def __init__(self, data: _ReadableBuffer = ...) -> None: ...
    def copy(self) -> _Hash: ...
    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    def intdigest(self) -> int: ...
    def update(self, __data: _ReadableBuffer) -> None: ...

VERSION: str
XXHASH_VERSION: str

def xxh32(__string: _ReadableBuffer = ...) -> _Hash: ...
def xxh64(__string: _ReadableBuffer = ...) -> _Hash: ...
def xxh3_64(__string: _ReadableBuffer = ...) -> _Hash: ...
def xxh3_128(__string: _ReadableBuffer = ...) -> _Hash: ...
def xxh32_digest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh32_intdigest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh32_hexdigest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh64_digest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh64_intdigest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh64_hexdigest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh3_64_digest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh3_64_intdigest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh3_64_hexdigest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh3_128_digest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh3_128_intdigest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh3_128_hexdigest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh128_digest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh128_intdigest(input: _ReadableBuffer = ...) -> bytes: ...
def xxh128_hexdigest(input: _ReadableBuffer = ...) -> bytes: ...
